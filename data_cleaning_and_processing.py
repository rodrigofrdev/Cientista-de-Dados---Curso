# -*- coding: utf-8 -*-
"""Data cleaning and processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vM67-YkmADbf4oac0FCENcPfXFtZnbe1
"""

import pandas as pd
import seaborn as srn
import statistics as sts

# Importing data
dataset = pd.read_csv("Churn.csv", sep=";")
# Good practice, initially look for the data for know to know your shape
dataset.head(n=10)

# Return number of rows and columns
dataset.shape

# First problem, it's give name of columns
dataset.columns = ["Id", "Score", "Estado", "Genero", "Idade", "Patrimonio", "Saldo", "Produtos", "TemCartCredito",
                   "Ativo", "Salario", "Saiu"]

dataset.head()

# Exploring categorical data
# Estado: rule only allows states in the "Sul" region.
# RP, SC, SP, TD are out
estados_agg = dataset.groupby(["Estado"]).size()
estados_agg

estados_agg.plot.bar(color = "purple")

# The column genre have no problems, but have several representations for Genre.
# We need join this representations.
genero_agg = dataset.groupby("Genero").size()
genero_agg

genero_agg.plot.bar(color = "blue")

dataset["Score"].describe()

srn.boxplot(dataset["Score"]).set_title("Score")

srn.distplot(dataset["Score"]).set_title("Score")

# Average close to the median (50%), indicates that there is no abnormality, but we always need to check.
# We identify that we have a negative age - 20 (outlier)
# We identified that we have a common maximum age of 140 (outlier)
dataset["Idade"].describe()

srn.boxplot(dataset["Idade"]).set_title("Idade")

srn.distplot(dataset["Idade"]).set_title("Idade")

dataset["Saldo"].describe()

srn.boxplot(dataset["Saldo"]).set_title("Saldo")

srn.distplot(dataset["Saldo"]).set_title("Saldo")

dataset["Salario"].describe()

srn.boxplot(dataset["Salario"]).set_title("Salario")

srn.distplot(dataset["Salario"]).set_title("Salario")

# Searching nan values
# Genre and sallary has nan values
dataset.isnull().sum()

# Data processing

# Numeric columns
# Generally we use median

# Eliminate nan values by the median
mediana = sts.median(dataset['Salario'])
mediana

dataset['Salario'].fillna(mediana, inplace=True)
dataset.isnull().sum()

# Filter values out of the domain by the median
dataset.loc[(dataset['Idade'] < 0) | (dataset['Idade'] > 120)]

mediana = sts.median(dataset['Idade'])
mediana

dataset.loc[(dataset['Idade'] < 0) | (dataset['Idade'] > 120), 'Idade'] = mediana

desv = sts.stdev(dataset['Salario'])
desv

dataset.loc[dataset['Salario'] >= 2 * desv]

mediana = sts.median(dataset['Salario'])
dataset.loc[dataset['Salario'] >= 2 * desv, 'Salario'] = mediana

# Categoric columns
# Generally we use mode

genero_agg = dataset.groupby('Genero').size()
dataset['Genero'].fillna('Masculino', inplace=True)
dataset['Genero'].isnull().sum()

# Standardizing the domains
dataset.loc[dataset['Genero'] == 'M', 'Genero'] = 'Masculino'
dataset.loc[dataset['Genero'].isin(['F', 'Fem']), 'Genero'] = 'Feminino'
dataset.groupby('Genero').size()

dataset.loc[dataset['Estado'].isin(['RP','SP','TD']), 'Estado'] = 'RS'
dataset.groupby('Estado').size()

# Eliminate duplicates
dataset[dataset.duplicated(['Id'], keep=False)]
dataset.drop_duplicates(subset='Id', keep='first', inplace=True)